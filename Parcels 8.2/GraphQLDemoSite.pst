<?xml version="1.0"?><st-source><!-- Name: GraphQLDemoSiteBundleName: GraphQLDemoSiteBundleStructure: a Store.BundleForParcelDevelopmentPrerequisites: #(#(#any 'GraphQLBeta' '') #(#any 'GraphQLJSONPkg' '') #(#any 'Swazoo-Core' '') #(#any 'Swazoo-HTTP' '') #(#any 'Swazoo-Messages' ''))Parcel: nilParcelName: GraphQLDemoSitePrerequisiteDescriptions: #(#(#name 'GraphQLBeta' #componentType #package) #(#name 'GraphQLJSONPkg' #componentType #package) #(#name 'Swazoo-Core' #componentType #package) #(#name 'Swazoo-HTTP' #componentType #package) #(#name 'Swazoo-Messages' #componentType #package))PrerequisiteParcels: #(#('GraphQLBeta' '') #('GraphQLJSONPkg' '') #('Swazoo-Core' '') #('Swazoo-HTTP' '') #('Swazoo-Messages' ''))Date: 4:36:56 PM April 20, 2018 --><time-stamp>From VisualWorksÂ® Personal Use Edition, 8.2 of 15 de julio de 2016 on 20 de abril de 2018 at 16:36:56</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>Film</name><environment>Smalltalk</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name rating director </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category></category><attributes><package>GraphQLDemoSite</package></attributes></class><class><name>GraphQLBetaDemoSite</name><environment>Smalltalk</environment><super>Swazoo.SwazooSite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>webSocket graphql schema dataProvider </inst-vars><class-inst-vars></class-inst-vars><imports>			Swazoo.*			</imports><category></category><attributes><package>GraphQLDemoSite</package></attributes></class><comment><class-id>GraphQLBetaDemoSite</class-id><body>I am a class that creates a simple demo webapp that responds to requets and create the language of graphql</body></comment><methods><class-id>Film</class-id> <category>accessing</category><body package="GraphQLDemoSite">director	^director</body><body package="GraphQLDemoSite">director: anObject	director := anObject</body><body package="GraphQLDemoSite">name	^name</body><body package="GraphQLDemoSite">name: anObject	name := anObject</body><body package="GraphQLDemoSite">rating	^rating</body><body package="GraphQLDemoSite">rating: anObject	rating := anObject</body></methods><methods><class-id>Film</class-id> <category>initialize-release</category><body package="GraphQLDemoSite">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Edit the following to properly initialize instance variables ***"	name := nil.	rating := nil.	director := nil.	" *** And replace this comment with additional initialization code *** "	^self</body></methods><methods><class-id>Film class</class-id> <category>instance creation</category><body package="GraphQLDemoSite">name: aName rating: aRating director: aDirector	| inst |	inst := self new.	inst name: aName;		rating: aRating;		director: aDirector.	^ inst</body><body package="GraphQLDemoSite">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>GraphQLBetaDemoSite</class-id> <category>serving</category><body package="GraphQLDemoSite">answerTo: aRequest 	|query ans stream |	query :=''.	ans := ''.	(aRequest urlString beginsWith: '/?query') ifTrue: [ 		query := (aRequest queryAt: 'query' ifAbsent:['']) trimSeparators.		stream := String new writeStream.		(JSONEncoder on: stream pretty: true indent: 2) encode: (graphql handleRequest: query).		ans := stream contents.	].	^ self buildResponseWith: (ans) from: query.</body><body package="GraphQLDemoSite">configure	graphql := GraphQLBeta.GraphQL new.	graphql createSchema: GraphQLBeta.Query schema.</body></methods><methods><class-id>GraphQLBetaDemoSite</class-id> <category>private</category><body package="GraphQLDemoSite">buildResponseWith: result from: query	| response |	response := HTTPResponse ok.	response		contentType: 'text/html';		entity: '&lt;html&gt;&lt;head&gt;&lt;style&gt; .flex-container {    display: -webkit-flex;    display: flex;      -webkit-flex-flow: row wrap;    flex-flow: row wrap;    text-align: center;}.flex-container &gt; * {    padding: 15px;    -webkit-flex: 1 100%;    flex: 1 100%;}.article {    text-align: left;}header {background: black;color:white;}footer {background: #aaa;color:white;}.nav {background:#eee;}.nav ul {    list-style-type: none;    padding: 0;}.nav ul a {    text-decoration: none;}@media all and (min-width: 768px) {    .nav {text-align:left;-webkit-flex: 1 auto;flex:1 auto;-webkit-order:1;order:1;}    .article {-webkit-flex:5 0px;flex:5 0px;-webkit-order:2;order:2;}    footer {-webkit-order:3;order:3;}}&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;div class="flex-container"&gt;&lt;header&gt;  &lt;h1&gt;ProtoGraphQL in Smalltalk&lt;/h1&gt;&lt;/header&gt;&lt;nav class="nav"&gt;&lt;form method="get"&gt;&lt;textarea name="query" cols="50" rows="15"&gt;', query, '&lt;/textarea&gt;&lt;input type="submit" value="Submit"/&gt;&lt;/form&gt;&lt;/nav&gt;&lt;article class="article"&gt;  &lt;pre id="result"&gt;',result,'&lt;/pre&gt;&lt;/article&gt;&lt;footer&gt;SemanTICs S.R.L.&amp; Object Profile&lt;/footer&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;'.	^response</body><body package="GraphQLDemoSite">helpResolve: aResolution 	(self canAnswer and: [aResolution siteMatch: self]) ifFalse: [^nil].	^self answerTo: aResolution request</body></methods><methods><class-id>GraphQLBetaDemoSite class</class-id> <category>demo</category><body package="GraphQLDemoSite">demoStart	"on http://localhost:8888/ will return simple 'Hello World'"	| site |	site := Swazoo.SwazooServer singleton siteNamed: 'graphql'.	site isNil ifTrue: [site := self prepareDemoSite].	site configure.	site start</body><body package="GraphQLDemoSite">demoStop	| site |	site := Swazoo.SwazooServer singleton siteNamed: 'graphql'.	^site notNil ifTrue: [site stop. site] ifFalse: [nil].</body><body package="GraphQLDemoSite">prepareDemoSite	| site |	site := self newNamed: 'graphql'. "which is now also added to SwazoServer"	site host: '*' ip: '*' port: 8888.	^site</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SwazooSite</name><environment>Swazoo</environment><super>Swazoo.CompositeResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name serving </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Swazoo-Core</category><attributes><package>Swazoo-Core</package></attributes></class></st-source>