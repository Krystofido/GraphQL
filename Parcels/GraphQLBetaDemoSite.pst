<?xml version="1.0"?><st-source><!-- Name: GraphQLBetaDemoSiteBundleName: GraphQLBetaDemoSiteBundleStructure: a Store.BundleForParcelParcel: #('GraphQLBetaDemoSite')ParcelName: GraphQLBetaDemoSiteDate: 11:11:10 am March 9, 2018 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on March 9, 2018 at 11:11:10 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GraphQLBetaDemoSite</name><environment>Swazoo</environment><super>Swazoo.SwazooSite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>webSocket graphql schema dataProvider </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GraphQLBetaDemo</category><attributes><package>GraphQLBetaDemoSite</package></attributes></class><class><name>Film</name><environment>Core</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name rating director </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GraphQLBetaDemo</category><attributes><package>GraphQLBetaDemoSite</package></attributes></class><methods><class-id>Swazoo.GraphQLBetaDemoSite</class-id> <category>private</category><body package="GraphQLBetaDemoSite" selector="answerTo:">answerTo: aRequest 	|query ans stream |	query :=''.	ans := ''.	(aRequest urlString startsWith: '/?query') ifTrue: [ 		query := (aRequest queryAt: 'query' ifAbsent:['']) trimSeparators.		stream := String new writeStream.		(JSONEncoder on: stream pretty: true indent: 2) encode: (graphql handleRequest: query).		ans := stream contents.	].	^ self buildResponseWith: (ans) from: query.</body><body package="GraphQLBetaDemoSite" selector="buildResponseWith:from:">buildResponseWith: result from: query	| response |	response := HTTPResponse ok.	response		contentType: 'text/html';		entity: ('&lt;html&gt;&lt;head&gt;&lt;style&gt; .flex-container {    display: -webkit-flex;    display: flex;      -webkit-flex-flow: row wrap;    flex-flow: row wrap;    text-align: center;}.flex-container &gt; * {    padding: 15px;    -webkit-flex: 1 100%;    flex: 1 100%;}.article {    text-align: left;}header {background: black;color:white;}footer {background: #aaa;color:white;}.nav {background:#eee;}.nav ul {    list-style-type: none;    padding: 0;}.nav ul a {    text-decoration: none;}@media all and (min-width: 768px) {    .nav {text-align:left;-webkit-flex: 1 auto;flex:1 auto;-webkit-order:1;order:1;}    .article {-webkit-flex:5 0px;flex:5 0px;-webkit-order:2;order:2;}    footer {-webkit-order:3;order:3;}}&lt;/style&gt; &lt;/head&gt;&lt;body&gt;&lt;div class="flex-container"&gt;&lt;header&gt;  &lt;h1&gt;ProtoGraphQL en VW 7.4&lt;/h1&gt;&lt;/header&gt;&lt;nav class="nav"&gt;&lt;form method="get"&gt;&lt;textarea name="query" cols="50" rows="15"&gt;', query, '&lt;/textarea&gt;&lt;input type="submit" value="Submit"/&gt;&lt;/form&gt;&lt;/nav&gt;&lt;article class="article"&gt;  &lt;pre id="result"&gt;',result,'&lt;/pre&gt;&lt;/article&gt;&lt;footer&gt;SemanTICs S.R.L.&amp; Object Profile&lt;/footer&gt;&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;').	^response</body><body package="GraphQLBetaDemoSite" selector="configure">configure	graphql := GraphQLBeta.GraphQL new.	graphql createSchema: GraphQLBeta.Query schema.</body><body package="GraphQLBetaDemoSite" selector="helpResolve:">helpResolve: aResolution 	(self canAnswer and: [aResolution siteMatch: self]) ifFalse: [^nil].	^self answerTo: aResolution request</body></methods><methods><class-id>Swazoo.GraphQLBetaDemoSite class</class-id> <category>demo</category><body package="GraphQLBetaDemoSite" selector="demoStart">demoStart	"on http://localhost:8888/ will return simple 'Hello World'"	| site |	site := Swazoo.SwazooServer singleton siteNamed: 'graphql'.	site isNil ifTrue: [site := self prepareDemoSite].	site configure.	site start</body><body package="GraphQLBetaDemoSite" selector="demoStop">demoStop	| site |	site := Swazoo.SwazooServer singleton siteNamed: 'graphql'.	^site notNil ifTrue: [site stop. site] ifFalse: [nil].</body><body package="GraphQLBetaDemoSite" selector="prepareDemoSite">prepareDemoSite	| site |	site := self newNamed: 'graphql'. "which is now also added to SwazoServer"	site host: '*' ip: '*' port: 8888.	^site</body></methods><methods><class-id>Core.Film</class-id> <category>accessing</category><body package="GraphQLBetaDemoSite" selector="director">director	^ director</body><body package="GraphQLBetaDemoSite" selector="director:">director: aString	director := aString</body><body package="GraphQLBetaDemoSite" selector="encodeAsJSONDataUsing:">encodeAsJSONDataUsing: aJSONEncoder	aJSONEncoder encode: self toDictionary</body><body package="GraphQLBetaDemoSite" selector="name">name	^ name</body><body package="GraphQLBetaDemoSite" selector="name:">name: aString	name := aString</body><body package="GraphQLBetaDemoSite" selector="rating">rating	^ rating</body><body package="GraphQLBetaDemoSite" selector="rating:">rating: aInt	rating := aInt</body><body package="GraphQLBetaDemoSite" selector="toDictionary">toDictionary	^ Dictionary new	   at: #name put: name;	   at: #rating put: rating;	   at: #director put: director;	   yourself</body></methods><methods><class-id>Core.Film class</class-id> <category>instance creation</category><body package="GraphQLBetaDemoSite" selector="name:rating:director:">name: aName rating: aRating director: aDirector	| inst |	inst := self new.	inst name: aName;		rating: aRating;		director: aDirector.	^ inst</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>Object</name><environment>Core</environment><super></super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Kernel-Objects</category><attributes><package>Kernel-Objects</package></attributes></class><class><name>SwazooSite</name><environment>Swazoo</environment><super>Swazoo.CompositeResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name serving </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Swazoo-Core</category><attributes><package>Swazoo-Core</package></attributes></class></st-source>