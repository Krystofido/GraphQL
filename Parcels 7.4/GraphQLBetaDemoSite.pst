<?xml version="1.0"?><st-source><!-- Name: GraphQLBetaDemoSiteBundleName: GraphQLBetaDemoSiteBundleStructure: a Store.BundleForParcelParcel: #('GraphQLBetaDemoSite')ParcelName: GraphQLBetaDemoSiteDate: 1:35:59 am December 12, 2018 --><time-stamp>From VisualWorksÂ®, 7.4 of December 5, 2005 on December 12, 2018 at 1:35:59 am</time-stamp><do-it>(Dialog confirm: 'You are filing-in a Parcel source file!\\While this is possible it will not have\the same effect as loading the parcel.\None of the Parcel''s prerequisites will\be loaded and none of its load actions\will be performed.\\Are you sure you want to file-in?' withCRs) ifFalse: [self error: 'Parcel file-in abandoned.  Choose terminate or close.']</do-it><class><name>GraphQLSwazoo</name><environment>Smalltalk</environment><super>Swazoo.SwazooSite</super><private>false</private><indexed-type>none</indexed-type><inst-vars>demo </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GraphQLBetaDemoSite</category><attributes><package>GraphQLBetaDemoSite</package></attributes></class><class><name>GraphQLWVPlatform</name><environment>Smalltalk</environment><super>GraphQLBeta.GraphQLPlatform</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>GraphQLBetaDemoSite</category><attributes><package>GraphQLBetaDemoSite</package></attributes></class><methods><class-id>GraphQLSwazoo</class-id> <category>initialize-release</category><body package="GraphQLBetaDemoSite" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>GraphQLSwazoo</class-id> <category>accessing</category><body package="GraphQLBetaDemoSite" selector="demo:">demo: aDemo	demo := aDemo</body></methods><methods><class-id>GraphQLSwazoo</class-id> <category>private</category><body package="GraphQLBetaDemoSite" selector="helpResolve:">helpResolve: aResolution 	(self canAnswer and: [aResolution siteMatch: self]) ifFalse: [^nil].	^self answerTo: aResolution request</body></methods><methods><class-id>GraphQLSwazoo</class-id> <category>serving</category><body package="GraphQLBetaDemoSite" selector="answerJson:">answerJson: aRequest	| query operation variables shouldValidate d res response arr |	d := self parseQueryFrom: aRequest.	query := (d at: 'query' ifAbsent: ['']) trim.	operation := d at: 'operationName' ifAbsent: [''].	variables := d at: 'variables' ifAbsent: [''].	shouldValidate := (d at: 'shouldValidate' ifAbsent: ['']) = 'true'.		res := demo graphql		operation: operation;		variables: variables;		shouldValidate: shouldValidate;		handleRequest: query.	res := JSONEncoder encode: res.	response := Swazoo.HTTPResponse ok.	arr := ByteArray fromString: res encoding: 'default'.	response		contentType: 'application/json';		entity: arr.	^ response</body><body package="GraphQLBetaDemoSite" selector="answerTo:">answerTo: aRequest	| b ans|	aRequest isPost		ifTrue: [ ^ self answerJson: aRequest ].	b := [ ans := demo answerTo: aRequest].	b on: Error do: [:ex | self halt. b value ].	^ ans</body><body package="GraphQLBetaDemoSite" selector="parseQueryFrom:">parseQueryFrom: aRequest	| stream dic |	dic := Dictionary new.	stream := aRequest entityBody readStream.	[stream atEnd] whileFalse: 		[| nameValue n value |		nameValue := stream upTo: $&amp; .		n := nameValue copyUpTo: $= .		value := nameValue readStream upTo: $= "if any"; upToEnd.		dic at: n put: (Swazoo.HTTPString decodedHTTPFrom: value)].	^ dic</body></methods><methods><class-id>GraphQLWVPlatform</class-id> <category>initialize-release</category><body package="GraphQLBetaDemoSite" selector="initialize">initialize	"Initialize a newly created instance. This method must answer the receiver."	super initialize.	" *** Replace this comment with the appropriate initialization code *** "	^self</body></methods><methods><class-id>GraphQLWVPlatform</class-id> <category>server</category><body package="GraphQLBetaDemoSite" selector="okResponse:">okResponse: string	| response arr |	response := Swazoo.HTTPResponse ok.	arr := ByteArray fromString: string encoding: 'default'.	response		contentType: Net.MimeTypeDescriptor contentTypeHtml;		entity: arr.	^ response</body><body package="GraphQLBetaDemoSite" selector="registerDemoServer:">registerDemoServer: demo	| site |	site := Swazoo.SwazooServer singleton siteNamed: 'graphql'.	site isNil ifTrue: [ 		site := GraphQLSwazoo newNamed: 'graphql'.		site demo: demo.		site host: '*' ip: '*' port: 8888 ].	site start.</body><body package="GraphQLBetaDemoSite" selector="request:at:">request: aRequest at: nameQuery	^ (aRequest queryAt: nameQuery ifAbsent:['']) trimBoth.</body><body package="GraphQLBetaDemoSite" selector="serverStop">serverStop	| site server |	server := Swazoo.SwazooServer singleton.	site := server siteNamed: 'graphql'.	^site notNil ifTrue: [ server removeSite: site] ifFalse: [nil].</body></methods><methods><class-id>GraphQLWVPlatform</class-id> <category>accessing - classes</category><body package="GraphQLBetaDemoSite" selector="classAt:">classAt: aSymbol	^ Smalltalk allClasses detect: [:cls | 		cls name = aSymbol ].</body><body package="GraphQLBetaDemoSite" selector="jsonFromString:">jsonFromString: string	^ JSONDecoder decode: string</body><body package="GraphQLBetaDemoSite" selector="jsonWriter">jsonWriter	^ JSONEncoder</body><body package="GraphQLBetaDemoSite" selector="toJson:">toJson: object	^ self jsonWriter toStringPretty: object</body></methods><methods><class-id>GraphQLWVPlatform class</class-id> <category>instance creation</category><body package="GraphQLBetaDemoSite" selector="isActive">isActive	^ true</body><body package="GraphQLBetaDemoSite" selector="new">new	"Answer a newly created and initialized instance."	^super new initialize</body></methods><methods><class-id>JSONEncoder class</class-id> <category>utility</category><body package="GraphQLBetaDemoSite" selector="toStringPretty:">toStringPretty: string	| stream |	stream := String new writeStream.	(self on: stream pretty: true indent: 2) encode: string.	^ stream contents</body></methods><methods><class-id>Tools.VisualLauncher class</class-id> <category>resources</category><body package="GraphQLBetaDemoSite" selector="graphql64">graphql64	^ 'iVBORw0KGgoAAAANSUhEUgAAABQAAAAUCAYAAACNiR0NAAACOElEQVR42qVUu24TURDNT9FBRYPCQ5HoeIggKLCI6aAFUUATxKOgQRGkAIEIEbJjybFJjBIRhSSyYvKCWAl57N7X3v0FH+aOl92gtdcWKY40e3fm3Lkzc2YgDMNWV9iwZcYaLXH6M+TladimaGX6EwYiA93gXyjBP/GRIcjO8nXIJAzqBzGZg0cw9f3+CG1gGUx0qKDGViHPFqEeL0IMTUEOlaAfLfKZpn/O529cGMUlhHsK8k4N8tYM9PMVyOEKzMQmgsYhEwTbvqsfBNlm9YD/qetV6BcrULkZyHwN4b5OCNXIbPwsOViE/eXzT5ederYc324cAWXJmZGPHCzEcSr/NSGUtxNC4W5zAZ6BuFRO1YjPvIBt96o4kZFaQmh3JKctb1YRbHqwKuBvXdhKERo6UxTsfOwWZXmjyr7Bjvi3Kfp1A/rJUjuo0oS8VunaSTVchSlvt+3RJeg3jXSXY0LqmLhSho1u7AR+0dVp9s0kVKPfoceJ+P5CzwFWD74xkc4kfLhAEqOi+6YnofNxDXIxKUK7q7iw/pkCzNu13mQR9Ls1CIpx3Q6oDMnY5JOxUblZHuJ+IHNH5pdGryOhf3IS+mUd+v16NsZ/wD812Xmw7Z6EorSFk97TZR4ZNbEBuyvTHSaZmuJPzk6/Ir1H0rO/ZXo5hPFy0O3lcI60+2GdbqehJ3maL02IiyWYT6Rzr63dsONy6HN9OQQb3v/vQ9bukQXrn5863oJtq0JA35uHujtHtupJ+AcUbXm4X7+vYwAAAABJRU5ErkJggg=='</body><body package="GraphQLBetaDemoSite" selector="graphql64Icon">graphql64Icon"UIMaskEditor new openOnClass: self andSelector: #graphql64Icon"	&lt;resource: #image&gt;	| stream reader image |	stream := (Base64EncodingStream decodeString: VisualLauncher graphql64) asByteArray readStream.	reader := ImageReader readerClassFor: stream.	image := (reader new from: stream) image.		^ CachedImage on: image.</body></methods><methods><class-id>Tools.VisualLauncher</class-id> <category>menus - pdp</category><body package="GraphQLBetaDemoSite" selector="graphqlStartDemo">graphqlStartDemo	&lt;menuItem: 'Start GraphQL server' icon: #graphql64Icon nameKey: nil 	menu: #(#menuBar #tools) position: 60.0&gt;		GraphQLBeta.GraphQLBetaDemoSite demoStart.</body><body package="GraphQLBetaDemoSite" selector="graphqlStopDemo">graphqlStopDemo	&lt;menuItem: 'Stop GraphQL server' icon: #graphql64Icon nameKey: nil 	menu: #(#menuBar #tools) position: 60.1&gt;		GraphQLBeta.GraphQLBetaDemoSite demoStop.</body></methods><do-it>"Imported Classes:"</do-it><do-it>self error: 'Attempting to file-in parcel imports.  Choose terminate or close'</do-it><class><name>GraphQLPlatform</name><environment>GraphQLBeta</environment><super>Core.Object</super><private>false</private><indexed-type>none</indexed-type><inst-vars></inst-vars><class-inst-vars>instance </class-inst-vars><imports></imports><category>GraphQLBeta-Core</category><attributes><package>GraphQLBeta-Core</package></attributes></class><class><name>SwazooSite</name><environment>Swazoo</environment><super>Swazoo.CompositeResource</super><private>false</private><indexed-type>none</indexed-type><inst-vars>name serving </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Swazoo-Core</category><attributes><package>Swazoo-Core</package></attributes></class><class><name>VisualLauncher</name><environment>Tools</environment><super>UI.ApplicationModel</super><private>false</private><indexed-type>none</indexed-type><inst-vars>menuBar toolBar textCollector toolDock </inst-vars><class-inst-vars></class-inst-vars><imports></imports><category>Tools-Misc</category><attributes><package>Tools-Misc</package></attributes></class></st-source>